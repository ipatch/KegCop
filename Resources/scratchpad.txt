----------------------------------------------
13OCT15 - begin to implement a function where the DB / SQLite can be exported to a CSV file.
https://docs.google.com/document/d/1PKGGriP6tFyz2yZ9ueMa1FSQyPS22YUxxJYhSCxUHUc/edit?usp=sharing


----------------------------------------------
19APR15 - addCreditMethod

- (void)addCreditToUser:(UIBarButtonItem *)sender {
NSLog(@"inside AddCreditToUser method");
// get current selected user / credit from pickerView

// get currently selected username in pickerview and store it as a NSString variable
NSInteger row;

row = [_pickerView selectedRowInComponent:0];
_strSelectedUN = _userNames[row][@"username"];
NSLog(@"The currently selected row is %@",_strSelectedUN);
}





19APR15 - pickerView Delegate Methods

#pragma mark - pickerView Delegate methods

- (void)pickerView:(UIPickerView *)pickerView didSelectRow: (NSInteger)row inComponent:(NSInteger)component {
// handle selection

}
/*
* tell the picker how many rows are available for a given component
*/
- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {

if(component == 0) {
return _userNames.count;
}
else if(component == 1){

return _zeroToFifty.count;
}
}

/*
* tell the picker how many components it will have
*/
- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {
return 2;
}

/*
* tell the picker the title for a given component
*/
- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component {
//    NSString *title;
//    title = [@"" stringByAppendingFormat:@"%d",row];
//    return title;

if(component == 0) {
return _userNames[row][@"username"];
}
else if (component == 1) {
//        return _zeroToFifty;
// how to return a NSMutableArray
return [_zeroToFifty objectAtIndex:row];
}
}

/*
* tell the picker the width of each row for a given component
*/
- (CGFloat)pickerView:(UIPickerView *)pickerView widthForComponent:(NSInteger)component {
if (component == 0) {
int sectionWidth = 150;
return sectionWidth;
}
else if (component == 1) {
int sectionWidth = 50;
return sectionWidth;
}
}
----------------------------------------------
19APR15 - UIPickerView for Add Credit functionality

//            UIButton *infoButton = [UIButton buttonWithType:UIButtonTypeInfoLight];
//            [infoButton addTarget:self action:@selector(displayAboutUs) forControlEvents:UIControlEventTouchDown];
//            UIBarButtonItem *itemAboutUs = [[UIBarButtonItem alloc] initWithCustomView:infoButton];
//

//            UIBarButtonItem *btnAddCredit = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd target:self action:@selector(addCreditToUser:)];
//            [toolBar setItems:[NSArray arrayWithObjects:flex,btnAddCredit,nil]];
//
//            toolBar.userInteractionEnabled = true;


//            UIView *pickerToolBar = [[UIView alloc] initWithFrame:CGRectMake(0, 200, 320, 366)];


//            _pickerView.delegate = self;
//            _pickerView.showsSelectionIndicator = YES;
//
//            [self.parentViewController.view addSubview:toolBar];
//            [self.parentViewController.view addSubview:pickerToolBar];


_pickerView = [[UIPickerView alloc] initWithFrame:CGRectMake(0, 200, 320, 216)];

// add toolbar to pickerView
UIToolbar *toolBar = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 200, 320, 44)];
toolBar.barStyle = UIBarStyleBlackOpaque;

UIBarButtonItem *flex = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];


// line below is problematic line
[_pickerView addSubview:toolBar];


----------------------------------------------
17APR15

// Added 5AUG13 - trying to figure out how to dismiss view controller based upon view property / id
NSLog(@"The currently loaded view:%c",[self.view isKindOfClass:[ViewControllerCreate class]]);


----------------------------------------------
15APR15

NSInteger zeroToFifty[50];
for (NSInteger i = 0; i < 50; i++) {
zeroToFifty[i] = i;
}
return zeroToFifty[49];


==============================================
13APR15

cleaned up scratchpad.txt

Notes
- to bump build
agvtool bump -all

- to bump marketing version
-agvtool new-marketing-version <0.1.4>

====================================================
26MAR15
it is no longer necessary to synthesize properties in the .m file,
Xcode / Obj-C auto synthesizes properties with the "_" i.e.,
_mybutton

====================================================
19MAR15 - is the Bluno the peripheral or the central?
====================================================
Answer: reviewing the source code it appears the
iOS device is the CBCentralManager.  Going to try
and confirm with a SO questoin.

Confirmed the iOS device is the CBCentralManager,
stackoverflow.com/questions/21466245

====================================================
removed the following code from main.m
====================================================
// creates ns.log file in Documents directory - NOT COMPLETE
//        NSArray *paths =
//        NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
//        NSString *log = [[paths objectAtIndex:0] stringByAppendingPathComponent: @"ns.log"];
//
//        NSFileManager *fileMgr = [NSFileManager defaultManager];
//        [fileMgr removeItemAtPath:log error:nil];
//
//        freopen([log fileSystemRepresentation], "a", stderr);
//
//        int retVal = UIApplicationMain(argc, argv, nil, nil);
//       return retVal;

====================================================
removed the following from controllers
====================================================
//        _managedObjectContext = [(AppDelegate *)[[UIApplication sharedApplication] delegate] managedObjectContext];

=====================================================
clean-up of Core Data
=====================================================

// add conditional code for simulator and iDevice
#if TARGET_IPHONE_SIMULATOR
NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);

NSString *docPath = [documentPaths objectAtIndex:0];

NSURL *storeURL = [NSURL fileURLWithPath: [docPath stringByAppendingPathComponent:@"Accounts.sqlite"]];
#else
// jb path - /var/mobile/Library/Kegcop/
NSString *docPath = self.documentsDirectoryPath;

NSURL *storeURL = [NSURL fileURLWithPath: [docPath stringByAppendingPathComponent:@"Accounts.sqlite"]];
#endif


#pragma mark - Application's Documents directory

// Returns the URL to the application's Documents directory.
- (NSURL *)applicationDocumentsDirectory
{
return [[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask] lastObject];
}

// set path for documents in jb environment
-(NSString *)documentsDirectoryPath
{
#ifdef JB

NSString *documentPath =@"/var/mobile/Library/KegCop/";

if (![[NSFileManager defaultManager] fileExistsAtPath:documentPath])
{
[[NSFileManager defaultManager] createDirectoryAtPath:documentPath
withIntermediateDirectories:NO
attributes:nil
error:NULL];
}

return documentPath;

#else

NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
return [documentPaths objectAtIndex:0];

#endif
}


=====================================================
swift notes
=====================================================
all variables are declared using var

variables cannot be changed from one data type
to another data type, unlike Javascript

i.e. var firstName = "Chris"
var firstName = "99"

the above two lines will throw a compile error

Creating constants in Swift

let daysInWeek = 7

=====================================================
sample swift code for AVCaptureSession
=====================================================


let captureSession = AVCaptureSession()
var previewLayer : AVCaptureVideoPreviewLayer?

// if we find a device we'll store it here for later use
var captureDevice : AVCaptureDevice?

override func viewDidLoad() {
println("begin viewDidLoad in ViewControllerAvatar.swift")
super.viewDidLoad()
// Do any additional setup after loading the new, typically from a nib.
captureSession.sessionPreset = AVCaptureSessionPresetLow

let devices = AVCaptureDevice.devices()

// loop thrugh all the capture devices on this phone
for device in devices {
// make sure this particular device supports video
if (device.hasMediaType(AVMediaTypeVideo)) {
// finally check the position and confirm we've got the front camera
if(device.position == AVCaptureDevicePosition.Front) {
captureDevice = device as? AVCaptureDevice
if captureDevice != nil {
println("Capture device found")
beginSession()
}
}
}
}
}

func focusTo(value : Float) {
if let device = captureDevice {
if(device.lockForConfiguration(nil) && device.isFocusModeSupported(AVCaptureFocusMode.AutoFocus )) {

//device.setFocusModeLockedWithLensPosition(value, completionHandler: { (time) -> Void in //

device.unlockForConfiguration()

}
}
}


//    func focusTo(value : Float) {
//        //dispatch_async(sessionQueue, {
//            //var device: AVCaptureDevice = self.videoDeviceInput.device
//        if let device = captureDevice {
//            var error: NSErrorPointer!
//            if device.lockForConfiguration(error) {
//                if device.focusPointOfInterestSupported && device.isFocusModeSupported(AVCaptureFocusMode.AutoFocus) {
//                    device.focusPointOfInterest = value
//                    device.focusMode = AVCaptureFocusMode.AutoFocus
//                }
//                if device.exposurePointOfInterestSupported && device.isExposureModeSupported(AVCaptureExposureMode.AutoExpose) {
//                    device.exposurePointOfInterest = point
//                    device.exposureMode = AVCaptureExposureMode.AutoExpose
//                }
//                device.unlockForConfiguration()
//            }
//            else {
//                // TODO: Log error.
//            }
//        }
//       // })
//    }





let screenWidth = UIScreen.mainScreen().bounds.size.width
override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {
var anyTouch = touches.anyObject() as UITouch
var touchPercent = anyTouch.locationInView(self.view).x / screenWidth
focusTo(Float(touchPercent))
}

override func touchesMoved(touches: NSSet, withEvent event: UIEvent) {
var anyTouch = touches.anyObject() as UITouch
var touchPercent = anyTouch.locationInView(self.view).x / screenWidth
focusTo(Float(touchPercent))
}

func configureDevice() {
if let device = captureDevice {
device.lockForConfiguration(nil)
device.focusMode = .Locked
device.unlockForConfiguration()
}
}

func beginSession() {

configureDevice()

var err : NSError? = nil
captureSession.addInput(AVCaptureDeviceInput(device: captureDevice, error: &err))

if err != nil {
println("error: \(err?.localizedDescription)")
}

previewLayer = AVCaptureVideoPreviewLayer(session: captureSession)
self.view.layer.addSublayer(previewLayer)
previewLayer?.frame = self.view.layer.frame
captureSession.startRunning()
}

              



----------------------------------------------------------


- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string {

NSLog(@"Range: %@", NSStringFromRange(range));
return ( range.location < 10 );

}

========================================================
Using GCD in an Application
========================================================

1. Create a new queue

2. Add blocks to the queue

dispatch_queue_create

Example:

dispatch_queue_t myQueue =
dispatch_queue_create("myQueueName", NULL);

dispatch_async(myQueue, ^{ [self longRunningOperation]; } );  // this is the code that is executed on the secondary thread

Note: UI updates should only happen on the main thread.





//
//  Account.m
//  KegCop
//
//  Created by capin on 6/8/12.
//

#import "Account.h"
#import "KeychainHelper.h"


@implementation Account

- (NSString*)password 
{
    if (self.username)
        return [KeychainHelper getPasswordForKey:self.username];
    return nil;
}

-(NSString*)getPasswordFromKeychain
{
    if (self.username)
        return [KeychainHelper getPasswordForKey:self.username];
    return nil;
}

- (void)setPassword:(NSString*)aPassword 
{
    if (self.username) [KeychainHelper setPassword:aPassword forKey:self.username];
    
    
}
- (void)prepareForDeletion
{
    if (self.username) [KeychainHelper removePasswordForKey:self.username];
}
@end

====================
GIT FILE MANAGEMENT

9APR13
- to update git repo
# git commit -am 'commit name'
# git checkout master
# git merge KegCop-Chris
# git status
# git push origin master

26APR13
- to merge branch with master
http://stackoverflow.com/questions/8965781/update-an-outdated-branch-against-master-in-a-git-repo

In your case, check out the old branch, then 
# git rebase master

=================================================================
6AUG13

The error message “unrecognized selector sent to instance XXX” means that the app is trying to call a method that doesn't exist.

=================================================================
29SEP13 - versioning - nsscreencast video 55

- to bump to the build verion number
$ agvtool bump -all

==================================================================
9OCT13

- installed cocoapods
$ gem install cocoapods

- where to place podfile?
the "Podfile" goes into to the project root directory

[!] From now on use `KegCop.xcworkspace`. <-- to launch project


==================================================
30DEC13

- received Bluno in the mail, and am now using Xcode 5.0

===================================================
6JAN14

- started working on bluetooth with BLuno microcontroller

- according to LightBlue BLuno is in peripheral mode because when the app is in central mode it sees the microcontroller in peripheral mode.

Local Name: DFBLEduinoV1.0

/dev/tty.usbmodemfd121

- successfully  put device in central mode.

- figure out way to scan for central devices in iOS App

CoreBluetooth[WARNING] <CBPeripheralManager is not powered on

====================================================
10JAN14

this method can be used to determine if a device is BT4.0LE compliant

http://weblog.invasivecode.com/post/39707371281/core-bluetooth-for-ios-6-core-bluetooth-was
/*
- (void)peripheralManagerDidUpdateState:(CBPeripheralManager *)peripheral {
    switch (peripheral.state) {
        case CBPeripheralManagerStatePoweredOn:
            [self setupService]; // method defined using the following tut ^ <= check above link
            break;
        default:
            NSLog(@"Peripheral Manager did change state");
            break;
    }
}
*/

this method is added via the following tut
http://weblog.invasivecode.com/post/39707371281/core-bluetooth-for-ios-6-core-bluetooth-was
/*
- (void)setupService {
    // Creates the characteristic UUID
    CBUUID *characteristicUUID = [CBUUID UUIDWithString:kCharacteristicUUID];
    
    // Creates the characteristic
    self.customCharacteristic = [[CBMutableCharacteristic alloc] initWithType:characteristicUUID properties:CBCharacteristicPropertyNotify value:nil permissions:CBAttributePermissionsReadable];
    
    // Creates the service UUID
    CBUUID *serviceUUID = [CBUUID UUIDWithString:kServiceUUID];
    
    // Creates the service and adds the characteristic to it
    self.customService = [[CBMutableService alloc] initWithType:serviceUUID primary:YES];
    
    // Sets the characteristics for this service
    [self.customService setCharacteristics:@[self.customCharacteristic]];
    
    // Publishes the service
    [self.peripheralManager addService:self.customService];
}
*/

// this method is added via the following tut
//
// http://weblog.invasivecode.com/post/39707371281/core-bluetooth-for-ios-6-core-bluetooth-was
//

/*
- (void)peripheralManager:(CBPeripheralManager *)peripheral didAddService:(CBService *)service error:(NSError *)error {
    if (error == nil) {
        // Starts advertising the service
        [self.peripheralManager startAdvertising:@{ CBAdvertisementDataLocalNameKey : @"ICServer", CBAdvertisementDataServiceUUIDsKey : @[[CBUUID UUIDWithString:kServiceUUID]] }];
    }
}
*/


/* - mobile.tuts tutorial method
- (void)peripheralManagerDidUpdateState:(CBPeripheralManager *)peripheral {
    if (peripheral.state != CBPeripheralManagerStatePoweredOn) {
        return;
    }
    if (peripheral.state == CBPeripheralManagerStatePoweredOn) {
        self.transferCharacteristic = [[CBMutableCharacteristic alloc] initWithType:[CBUUID UUIDWithString:TRANSFER_CHARACTERISTIC_UUID] properties:CBCharacteristicPropertyNotify value:nil permissions:CBAttributePermissionsReadable];
        CBMutableService *transferService = [[CBMutableService alloc] initWithType:[CBUUID UUIDWithString:TRANSFER_SERVICE_UUID] primary:YES];
        transferService.characteristics = @[_transferCharacteristic];
        [_peripheralManager addService:transferService];
    }
}
*/

/*
- (void)peripheralManager:(CBPeripheralManager *)peripheral central:(CBCentral *)central didSubscribeToCharacteristic:(CBCharacteristic *)characteristic {
    _dataToSend = [_textView.text dataUsingEncoding:NSUTF8StringEncoding];
    _sendDataIndex = 0;
    [self sendData];
}


- (void)sendData {
    static BOOL sendingEOM = NO;
    // end of message?
    if (sendingEOM) {
        BOOL didSend = [self.peripheralManager updateValue:[@"EOM" dataUsingEncoding:NSUTF8StringEncoding] forCharacteristic:self.transferCharacteristic onSubscribedCentrals:nil];
        if (didSend) {
            // It did, so mark it as sent
            sendingEOM = NO;
        }
        // didn't send, so we'll exit and wait for peripheralManagerIsReadyToUpdateSubscribers to call sendData again
        return;
    }
    // We're sending data
    // Is there any left to send?
    if (self.sendDataIndex >= self.dataToSend.length) {
        // No data left.  Do nothing
        return;
    }
    // There's data left, so send until the callback fails, or we're done.
    BOOL didSend = YES;
    while (didSend) {
        // Work out how big it should be
        NSInteger amountToSend = self.dataToSend.length - self.sendDataIndex;
        // Can't be longer than 20 bytes
        if (amountToSend > NOTIFY_MTU) amountToSend = NOTIFY_MTU;
        // Copy out the data we want
        NSData *chunk = [NSData dataWithBytes:self.dataToSend.bytes+self.sendDataIndex length:amountToSend];
        didSend = [self.peripheralManager updateValue:chunk forCharacteristic:self.transferCharacteristic onSubscribedCentrals:nil];
        // If it didn't work, drop out and wait for the callback
        if (!didSend) {
            return;
        }
        NSString *stringFromData = [[NSString alloc] initWithData:chunk encoding:NSUTF8StringEncoding];
        NSLog(@"Sent: %@", stringFromData);
        // It did send, so update our index
        self.sendDataIndex += amountToSend;
        // Was it the last one?
        if (self.sendDataIndex >= self.dataToSend.length) {
            // Set this so if the send fails, we'll send it next time
            sendingEOM = YES;
            BOOL eomSent = [self.peripheralManager updateValue:[@"EOM" dataUsingEncoding:NSUTF8StringEncoding] forCharacteristic:self.transferCharacteristic onSubscribedCentrals:nil];
            if (eomSent) {
                // It sent, we're all done
                sendingEOM = NO;
                NSLog(@"Sent: EOM");
            }
            return;
        }
    }
}

- (void)peripheralManagerIsReadyToUpdateSubscribers:(CBPeripheralManager *)peripheral {
    [self sendData];
}
*/

====================================================
26JAN14

CoreBluetooth[WARNING] <CBCentralManager: 0x16e77470> is disabling duplicate filtering, but is using the default queue (main thread) for delegate events

====================================================
1FEB14


- (void)centralManager:(CBCentralManager *)central didConnectPeripheral:(CBPeripheral *)peripheral {
    NSLog(@"Peripheral Connected");
    [_centralManager stopScan];
    NSLog(@"Scanning stopped");
    peripheral.delegate = self;
    [_data setLength:0];
    // discover the services offered by the peripheral
    [peripheral discoverServices:@[[CBUUID UUIDWithString:BLUNO_TRANSFER_SERVICE_UUID]]];
}

// this method is called once a service of a peripheral is discovered.
- (void)peripheral:(CBPeripheral *)peripheral didDiscoverServices:(NSError *)error {
    if (error) {
        [self cleanup];
        return;
    }
    for (CBService *service in peripheral.services) {
        [peripheral discoverCharacteristics:@[[CBUUID UUIDWithString:BLUNO_TRANSFER_CHARACTERISTIC_UUID]] forService:service];
    }
    // Discover other characteristics
}

// this method is called once a characteristic of a service is discovered
- (void)peripheral:(CBPeripheral *)peripheral didDiscoverCharacteristicsForService:(CBService *)service error:(NSError *)error {
    if (error) {
        [self cleanup];
        return;
    }
    for (CBCharacteristic *characteristic in service.characteristics) {
        if ([characteristic.UUID isEqual:[CBUUID UUIDWithString:BLUNO_TRANSFER_CHARACTERISTIC_UUID]]) {
            [peripheral setNotifyValue:YES forCharacteristic:characteristic];
        }
    }
}

- (void)peripheral:(CBPeripheral *)peripheral didUpdateValueForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error {
    if (error) {
        NSLog(@"Error");
        return;
    }
    NSString *stringFromData = [[NSString alloc] initWithData:characteristic.value encoding:NSUTF8StringEncoding];
    // Have we got everything we need?
    if ([stringFromData isEqualToString:@"EOM"]) {
        //[_textview setText:[[NSString alloc] initWithData:self.data encoding:NSUTF8StringEncoding]];
        [peripheral setNotifyValue:NO forCharacteristic:characteristic];
        [_centralManager cancelPeripheralConnection:peripheral];
    }
    [_data appendData:characteristic.value];
}

 (void)peripheral:(CBPeripheral *)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error {
    if (![characteristic.UUID isEqual:[CBUUID UUIDWithString:BLUNO_TRANSFER_CHARACTERISTIC_UUID]]) {
        return;
    }
    if (characteristic.isNotifying) {
        NSLog(@"Notification began on %@", characteristic);
    } else {
        // Notification has stopped
        [_centralManager cancelPeripheralConnection:peripheral];
    }
}


- (void)centralManager:(CBCentralManager *)central didDisconnectPeripheral:(CBPeripheral *)peripheral error:(NSError *)error {
    _discoveredPeripheral = nil;
    [_centralManager scanForPeripheralsWithServices:@[[CBUUID UUIDWithString:BLUNO_TRANSFER_SERVICE_UUID]] options:@{ CBCentralManagerScanOptionAllowDuplicatesKey : @YES }];
}

// this method should be called if central fails to connect to peripheral
- (void)centralManager:(CBCentralManager *)central didFailToConnectPeripheral:(CBPeripheral *)peripheral error:(NSError *)error {
    NSLog(@"Failed to connect");
    [self cleanup];
}

- (void)cleanup {
    // See if we are subscribed to a characteristic on the peripheral
    if (_discoveredPeripheral.services != nil) {
        for (CBService *service in _discoveredPeripheral.services) {
            if (service.characteristics != nil) {
                for (CBCharacteristic *characteristic in service.characteristics) {
                    if ([characteristic.UUID isEqual:[CBUUID UUIDWithString:BLUNO_TRANSFER_CHARACTERISTIC_UUID]]) {
                        if (characteristic.isNotifying) {
                            [_discoveredPeripheral setNotifyValue:NO forCharacteristic:characteristic];
                            return;
                        }
                    }
                }
            }
        }
    }
    [_centralManager cancelPeripheralConnection:_discoveredPeripheral];
}

======================================================
1FEB14 - VERSIONING using agvtool

commands
agvtool what-version    

- to update the version number of the build
agvtool bump -all